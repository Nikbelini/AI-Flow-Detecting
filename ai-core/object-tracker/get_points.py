{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8a4ecaa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "usage: ipykernel_launcher.py [-h] -i IMAGEPATH\n",
      "ipykernel_launcher.py: error: the following arguments are required: -i/--imagepath\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "2",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[31mSystemExit\u001b[39m\u001b[31m:\u001b[39m 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "e:\\AIM\\AI-Flow-Detecting\\ai-core\\mai\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:3707: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "# Import the required modules\n",
    "import cv2\n",
    "import argparse\n",
    "\n",
    "def run(im, multi=False):\n",
    "    im_disp = im.copy()\n",
    "    im_draw = im.copy()\n",
    "    window_name = \"Select objects to be tracked here.\"\n",
    "    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)\n",
    "    cv2.imshow(window_name, im_draw)\n",
    "\n",
    "    # List containing top-left and bottom-right to crop the image.\n",
    "    pts_1 = []\n",
    "    pts_2 = []\n",
    "\n",
    "    rects = []\n",
    "    run.mouse_down = False\n",
    "\n",
    "    def callback(event, x, y, flags, param):\n",
    "        if event == cv2.EVENT_LBUTTONDOWN:\n",
    "            if multi == False and len(pts_2) == 1:\n",
    "                print(\"WARN: Cannot select another object in SINGLE OBJECT TRACKING MODE.\")\n",
    "                print(\"Delete the previously selected object using key `d` to mark a new location.\")\n",
    "                return\n",
    "            run.mouse_down = True\n",
    "            pts_1.append((x, y))\n",
    "        elif event == cv2.EVENT_LBUTTONUP and run.mouse_down == True:\n",
    "            run.mouse_down = False\n",
    "            pts_2.append((x, y))\n",
    "            print(\"Object selected at [{}, {}]\".format(pts_1[-1], pts_2[-1]))\n",
    "        elif event == cv2.EVENT_MOUSEMOVE and run.mouse_down == True:\n",
    "            im_draw = im.copy()\n",
    "            cv2.rectangle(im_draw, pts_1[-1], (x, y), (255,255,255), 3)\n",
    "            cv2.imshow(window_name, im_draw)\n",
    "\n",
    "    print(\"Press and release mouse around the object to be tracked. \\n You can also select multiple objects.\")\n",
    "    cv2.setMouseCallback(window_name, callback)\n",
    "\n",
    "    print(\"Press key `p` to continue with the selected points.\")\n",
    "    print(\"Press key `d` to discard the last object selected.\")\n",
    "    print(\"Press key `q` to quit the program.\")\n",
    "\n",
    "    while True:\n",
    "        # Draw the rectangular boxes on the image\n",
    "        window_name_2 = \"Objects to be tracked.\"\n",
    "        for pt1, pt2 in zip(pts_1, pts_2):\n",
    "            rects.append([pt1[0],pt2[0], pt1[1], pt2[1]])\n",
    "            cv2.rectangle(im_disp, pt1, pt2, (255, 255, 255), 3)\n",
    "        # Display the cropped images\n",
    "        cv2.namedWindow(window_name_2, cv2.WINDOW_NORMAL)\n",
    "        cv2.imshow(window_name_2, im_disp)\n",
    "        key = cv2.waitKey(30)\n",
    "        if key == ord('p'):\n",
    "            # Press key `s` to return the selected points\n",
    "            cv2.destroyAllWindows()\n",
    "            point= [(tl + br) for tl, br in zip(pts_1, pts_2)]\n",
    "            corrected_point=check_point(point)\n",
    "            return corrected_point\n",
    "        elif key == ord('q'):\n",
    "            # Press key `q` to quit the program\n",
    "            print(\"Quitting without saving.\")\n",
    "            exit()\n",
    "        elif key == ord('d'):\n",
    "            # Press ket `d` to delete the last rectangular region\n",
    "            if run.mouse_down == False and pts_1:\n",
    "                print(\"Object deleted at  [{}, {}]\".format(pts_1[-1], pts_2[-1]))\n",
    "                pts_1.pop()\n",
    "                pts_2.pop()\n",
    "                im_disp = im.copy()\n",
    "            else:\n",
    "                print(\"No object to delete.\")\n",
    "    cv2.destroyAllWindows()\n",
    "    point= [(tl + br) for tl, br in zip(pts_1, pts_2)]\n",
    "    corrected_point=check_point(point)\n",
    "    return corrected_point\n",
    "\n",
    "def check_point(points):\n",
    "    out=[]\n",
    "    for point in points:\n",
    "        #to find min and max x coordinates\n",
    "        if point[0]<point[2]:\n",
    "            minx=point[0]\n",
    "            maxx=point[2]\n",
    "        else:\n",
    "            minx=point[2]\n",
    "            maxx=point[0]\n",
    "        #to find min and max y coordinates\n",
    "        if point[1]<point[3]:\n",
    "            miny=point[1]\n",
    "            maxy=point[3]\n",
    "        else:\n",
    "            miny=point[3]\n",
    "            maxy=point[1]\n",
    "        out.append((minx,miny,maxx,maxy))\n",
    "\n",
    "    return out\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    ap = argparse.ArgumentParser()\n",
    "    ap.add_argument(\"-i\", \"--imagepath\", required=True, help=\"Path to image\")\n",
    "\n",
    "    args = vars(ap.parse_args())\n",
    "\n",
    "    try:\n",
    "        im = cv2.imread(args[\"imagepath\"])\n",
    "    except:\n",
    "        print(\"Cannot read image and exiting.\")\n",
    "        exit()\n",
    "    points = run(im)\n",
    "    print(\"Rectangular Regions Selected are -> \", points)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "mai (3.12.6)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
